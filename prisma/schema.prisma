// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  // Relations
  organizedEvents Event[]
  registrations   Registration[]
  notifications   Notification[]
}

// Enum for User Roles
enum Role {
  USER
  ORGANIZER
}

// Event Model
model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  organizerId String

  // Relations
  organizer   User           @relation(fields: [organizerId], references: [id])
  registrations Registration[]
}

// Registration Model (Join Table)
model Registration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId]) // Ensures a user can only register once per event
}

// Notification Model (Bonus)
model Notification {
  id      String   @id @default(cuid())
  message String
  read    Boolean  @default(false)
  userId  String
  createdAt DateTime @default(now())

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// NextAuth Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
